TebLocalPlannerROS:

 odom_topic: /odom
 map_frame: /map

 # Trajectory

 teb_autosize: True
 dt_ref: 0.3
 dt_hysteresis: 0.1
 global_plan_overwrite_orientation: True
 max_global_plan_lookahead_dist: 4.0 #NOTE:depend on local_costmap 8/2 m. Specify the maximum length (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization. The actual length is than determined by the logical conjunction of the local costmap size and this maximum bound. Set to zero or negative in order to deactivate this limitation. But after testing, seeing to far is not a good method
 feasibility_check_no_poses: 4 # NOTE:Starting from the current robot pose and checks whether the those poses are collision free. 點越少,想越快,動作越流暢

 # Robot

 max_vel_x: 0.4
 max_vel_x_backwards: 0.2
 max_vel_theta: 0.3
 acc_lim_x: 0.1
 acc_lim_theta: 0.5
 min_turning_radius: 0.0 # Minimum turning radius of a carlike robot (set to zero for a diff-drive robot).

 #~<name>/footprint_model/type (string, default: "point")
 #Specify the robot footprint model type used for optimization. The type of the model significantly influences the required computation time.
 footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
   type: "point" # NOTE:paired with min_obstacle_dist <--could reduce computing power
   radius: 0.23 # for type "circular"
   line_start: [-0.3, 0.0] # for type "line"
   line_end: [0.3, 0.0] # for type "line"
   front_offset: 0.2 # for type "two_circles"
   front_radius: 0.2 # for type "two_circles"
   rear_offset: 0.2 # for type "two_circles"
   rear_radius: 0.2 # for type "two_circles"
   vertices: [[-0.21,-0.07],[-0.21,0.07],[-0.05,0.19],[0.16,0.19],[0.16,-0.19],[-0.05,-0.19]] #fitting mode # for type "polygon"

 # GoalTolerance

 xy_goal_tolerance: 0.2 #m Allowed final euclidean distance to the goal position in meters
 yaw_goal_tolerance: 0.1 #rad Allowed final orientation error in radians
 free_goal_vel: False #Remove the goal velocity constraint such that the robot can arrive at the goal with maximum speed

 # Obstacles

 min_obstacle_dist: 0.2 #NOTE:best_in_sim=0.2 #related with footprint_model
 include_costmap_obstacles: True
 include_dynamic_obstacles: True #NOTE:[new]
 inflation_dist: 0.6 #[new]
 dynamic_obstacle_inflation_dist: 0.6 #[new]
 costmap_obstacles_behind_robot_dist: 1.0

 legacy_obstacle_association: False #NOTE:Each obstacle position is attached to the closest pose on the trajectory in order to keep a distance. Additional neighbors can be taken into account as well. Note, this parameter might be removed in future versions, since the the obstacle association strategy has been modified in kinetic+. Refer to the parameter description of legacy_obstacle_association.
 obstacle_association_force_inclusion_factor: 1.5 #The non-legacy obstacle association strategy tries to connect only relevant obstacles with the discretized trajectory during optimization. But all obstacles within a specifed distance are forced to be included (as a multiple of min_obstacle_dist). E.g. choose 2.0 in order toenforce the consideration obstacles within a radius of 2.0*min_obstacle_dist. [This parameter is used only if parameter legacy_obstacle_association is false]
 #obstacle_poses_affected: 30 #insteaded by legacy_obstacle_association #neighbors of the closest pose are taken into account as well. Only this selected subset of poses is taken into account in the subsequent optimization step

 costmap_converter_plugin: "costmap_converter::CostmapToPolygonsDBSMCCH" ##NOTE:saving computing power
 #costmap_converter_plugin: ""
 costmap_converter_spin_thread: True
 costmap_converter_rate: 5

 # Optimization
 #For each obstacle (point/ occupied costmap cell, line, polygon) the closest pose of the planned trajectory is located (see figure above). According to the value of parameter obstacle_poses_affected neighbors of the closest pose are taken into account as well. Only this selected subset of poses is taken into account in the subsequent optimization step (here 3 poses and therefore 3 penalty terms). The association process is repeated after no_inner_iterations (parameter), resp. within each outer optimization iteration. The value of obstacle_poses_affected slightly influences the smoothness of the trajectory around obstacles. Also bigger obstacles require more connected poses to avoid inadmissable shortcuts. You may also choose a high value (> trajectory length) in order to connect all poses with each obstacle.
 no_inner_iterations: 5 #related with obstacle_poses_affected
 no_outer_iterations: 4 #related with obstacle_poses_affected
 optimization_activate: True
 optimization_verbose: False
 penalty_epsilon: 0.1
 weight_max_vel_x: 2
 weight_max_vel_theta: 1
 weight_acc_lim_x: 1
 weight_acc_lim_theta: 1
 weight_kinematics_nh: 1000
 weight_kinematics_forward_drive: 1
 weight_kinematics_turning_radius: 1
 weight_optimaltime: 1
 weight_obstacle: 20 #60  #NOTE:scaling of the individual costs. But if you choose too high values, the optimization problem becomes ill-conditioned壞脾氣 leading to a poor convergance behavior.
 weight_viapoint: 1 #[new]
 weight_inflation: 0.1 #[new]
 weight_dynamic_obstacle: 10 # not in use yet
 alternative_time_cost: False # not in use yet

 # Homotopy Class Planner

 enable_homotopy_class_planning: True #NOTE:同倫結構 多path
 enable_multithreading: True
 simple_exploration: False
 max_number_classes: 2  ##NOTE:default=4
 roadmap_graph_no_samples: 15
 roadmap_graph_area_width: 5
 h_signature_prescaler: 0.5
 h_signature_threshold: 0.1
 obstacle_keypoint_offset: 0.1
 obstacle_heading_threshold: 0.45
 visualize_hc_graph: False


costmap_converter/CostmapToPolygonsDBSMCCH:
 cluster_max_distance: 0.5
 cluster_min_pts: 2
 cluster_max_pts: 10000
 convex_hull_min_pt_separation: 0.1
